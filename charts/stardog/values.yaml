---
# The namespace for Stardog resources that override the release namespace
# namespaceOverride: stardog

# The number of Stardog replicas to deploy in the cluster
replicaCount: 3

# How to start the pods - use OrderedReady to use the default behavior of
# starting each pod one at a time or use Parallel to start them all at once
podManagementPolicy: Parallel

# The number of seconds the post install job will wait for Stardog to
# start. This includes the total time to launch the cluster in k8s,
# including ZooKeeper. Consider increasing it for k8s providers that
# have slower resource provisioning.
# waitForStartSeconds: 300

cluster:
  # Start Stardog as a cluster
  enabled: true

# The number of seconds to wait for pods to shutdown before
# killing them forcefully
terminationGracePeriodSeconds: 300

# Java Virtual Machine memory parameters to pass to stardog.
jvm:
  minHeap: 2g
  maxHeap: 2g
  directMem: 4g

# Additional Java Virtual Machine arguments to pass to stardog
javaArgs: ""

# The stardog specific name of the of the instance type ( Like s1.micro, s1.small etc)
stardogCloudType: undefined

licenseServer:
  enabled: false
  licenseType: unlimited
  url: ""
  
# The service type to use for Stardog ports
service:
  type: LoadBalancer
  annotations: {}
  # loadBalancerIP: 0.0.0.0

# The server port is the port to expose the Stardog server
# The sql port is the port to expose Stardog's business intelligence server
ports:
  server: 5820
  sql: 5806

SSL: 
  enabled: false

# The location Stardog will use for temporary space (i.e. java.io.tmpdir).
# If you choose to place this in STARDOG_HOME (/var/opt/stardog) for performance
# reasons, ensure that it does not conflict with any possible database names.
# For example, a good choice might be /var/opt/stardog/tmp-4646E7B662A7.
# If the directory does not exist it will be created.
tmpDir: /tmp

# The initial password for the Stardog admin user
admin:
  password: admin

image:
  registry: https://registry.hub.docker.com/v2/repositories
  repository: stardog/stardog
# Alternative config to pull from Stardog private repository
  # registry: stardog-eps-docker.jfrog.io
  # repository: stardog-eps-docker.jfrog.io/stardog
  tag: latest
  pullPolicy: IfNotPresent
  # username:
  # password:

# The storage class and size to use for Stardog home volumes for the pods
persistence:
  storageClass: standard
  size: 5Gi

nodeSelector: {}
tolerations: []
#  - key: key1
#    value: value1
#    effect: NoSchedule

antiAffinity: requiredDuringSchedulingIgnoredDuringExecution

resources: {}
#  requests:
#    cpu: 1
#    memory: 4Gi
#  limits:
#    cpu: 2
#    memory: 6Gi

# Dump the json formated Stardog audit log to the console of a side car container console
# The container will be named {{ .Release.Name }}-stardog-auditlog
enableAuditSidecar: false

# these allow you to configure the UID and group ID used by the container when it's running, and the fsGroup sets the group id for the volume-mounts
# if enabled: false, then the whole block is skipped
securityContext:
  enabled: false
  runAsUser: null
  runAsGroup: null
  fsGroup: null

log4jConfig:
  override: false
  # we provide a default log4j2.xml, if you want to provide your own. in your own values.yaml, set log4Config.override: true, and log4Config.content
  # content: null

# Stardog liveness probe settings. Consider increasing initialDelaySeconds on clouds where
# storage provisioning is slower. It is not generally required to modify periodSeconds and timeoutSeconds.
livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 15

# Stardog readiness probe settings. Consider increasing initialDelaySeconds when using nodes with
# K8S nodes with limited CPUs. It is not generally required to modify periodSeconds and timeoutSeconds.
readinessProbe:
  initialDelaySeconds: 90
  periodSeconds: 5
  timeoutSeconds: 3

stardogProperties: |
  pack.node.join.retry.count=15
  pack.node.join.retry.delay=1m


# Settings to use for the ZooKeeper chart that Stardog depends on.
# The full set of options can be found on the bitname ZK chart:
# https://github.com/bitnami/charts/tree/master/bitnami/zookeeper
zookeeper:
  enabled: true
  replicaCount: 3
  podDisruptionBudget:
    maxUnavailable: 1
  persistence:
    enabled: true
    storageClass: standard
    size: 5Gi
  resources:
    requests:
      memory: 2Gi
      cpu: 1
  env:
    ZK_LOG_LEVEL: INFO
    ZK_DATA_DIR: /data
    ZK_DATA_LOG_DIR: /data/datalog
    ZK_LOG_DIR: /data/log
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  image:
    tag: 3.7.1-debian-11-r58
    repository: bitnami/zookeeper
    pullPolicy: IfNotPresent
  logLevel: INFO

oauth:
  enabled: false
  azure:
    issuer: "http://localhost:8080"
    usernameField: username
    audience: "http://localhost:5820"
    keyUrl: "http://localhost:8080/.well-known/jwks.json"
    autoCreateUsers: true
    allowedGroupIdentifiers:
    - azure.microsoft.com/ff24ca66-bbaa-XXXX-XXXX-XXXXXXXXXXXX


  google: {}
    # When Stardog is used to create JWTs the JWTs are signed with the HMAC256 algorithm.  This
    # requires a secret to create a cryptographically secure signature.  The "signsecret" parameter
    # is that value that will be used for creating this signature.
    #signsecret: do_not_use
    #name: StardogServerJwt
    # A proper JWT requires an "aud" field that annotates it by saying the specific JWT is for a
    # specific service (audience).  When Stardog is used to create JWTs the signeraudience field
    # will be used as the "aud" in the JWTs that it creates.
    #signeraudience: stardog-cloud
    # When using a third party identity provider like google the JWT auth token that they send back for
    # use with Stardog includes an "aud" (audience) field.  This field is used to verify that not only
    # does the JWT token represent that user in question but that it was created with the intention of
    # being used by a specific "audience" which is this stardog server.  The value that google uses
    # for this is the "client-id" of the web oauth app.
    #googleaudience: google-client-id

ingress:
  enabled: false
  annotations: {}
  # nginx.ingress.kubernetes.io/use-regex: "true"
  # nginx.ingress.kubernetes.io/app-root: "/admin/alive"
  # kubernetes.io/tls-acme: "true" 
  #className: "nginx" 
  # dnsZone: dns.mycompany.com
  # server:
  #   url: stardog-cluster
  #   path: /(.*)
  #   pathtype: Prefix
  # sql:
  #   url: bi-endpoint
  #   paths: /(.*)
  #   pathtype: Prefix
  # tls: 
  #   enabled: false

launchpad:
  enabled: true
  image:
    registry: https://stardog-testing-docker.jfrog.io
    repository: stardog-testing-docker.jfrog.io/cloud/proxysql
    tag: 2.3.1
    pullPolicy: Always
  service:
    type: LoadBalancer
    annotations: {}
  env:
    - name: BASE_URL
      value: https://launchpad.helm.sd-testlab.com
    - name: SECURE
      value: "false"
    - name: K8S_DEPLOYMENT
      value: "true"
    - name: AZURE_AUTH_ENABLED
      value: "true"
    - name: COOKIE_SECRET
      value: some-secretX
    - name: STARDOG_INTERNAL_ENDPOINT
      value: https://stardog.helm.sd-testlab.com
    - name: STARDOG_EXTERNAL_ENDPOINT
      value: https://stardog.helm.sd-testlab.com
    - name: PASSWORD_AUTH_ENABLED
      value: "true"
    - name: FRIENDLY_NAME
      value: Stardog Applications
    - name: AZURE_CLIENT_ID
      value:  #<AZURE_CLIENT_ID> 
    - name: AZURE_CLIENT_SECRET
      value:  #<AZURE_CLIENT_SECRET>
    - name: AZURE_TENANT
      value: #<AZURE_TENANT>
    - name: JWK_LOCATION
      value: /jwk


# These public/private keys are only for testing and should not be used in production! 
# To Generate New Key Pair you can use one of these methods

# openssl genrsa -out privatekey.pem.key 4096
# openssl rsa -in privatekey.pem.key -out publickey.pem.pub -outform PEM -pubout

#Or

# ssh-keygen -t rsa -b 2048 -m PEM -f privatekey.key   # Don't add passphrase
# openssl rsa -in jwtRS256.key -pubout -outform PEM -out publickey.key.pub


  privatekey: | 
    ADD RSA PRIVATE KEY
  publickey: | 
    ADD RSA PUBLIC KEY


proxysql:
  enabled: false
  image:
    registry: https://stardog-testing-docker.jfrog.io
    repository: stardog-testing-docker.jfrog.io/cloud/proxysql
    tag: 2.3.1
    pullPolicy: Always

  confImage:
    registry: https://stardog-testing-docker.jfrog.io
    repository: stardog-testing-docker.jfrog.io/cloud/proxyconf
    tag: latest
    pullPolicy: Always

backup:
  enabled: false
  # provider: azure | gcp
  # azure:
  #   azurestorageaccountkey: 
  #   azurestorageaccountname: 
  #   storage:
  #     capacity: 100Gi
  #     className: azurefile-csi 
  #     resourceGroup: 
  #     shareName:
  # gcp:
  #   storage:
  #     capacity: 1Ti
  #     path:
  #     ipAddress: